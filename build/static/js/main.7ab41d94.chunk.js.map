{"version":3,"sources":["logo.svg","Components/Colors.js","Components/Title.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["flavorColor","i","heys","Title","props","state","word","this","interval","setInterval","setState","console","log","length","clearInterval","Fade","Name","NavLinks","NavLink","NavLinkButton","href","HomeBody","Greeting","Flavor","Headline","WorkButton","Block","Icons","Icon","target","React","Component","styled","div","a","App","className","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sOAAe,I,kECAFA,EAAc,U,OCMvBC,EAAI,EACFC,EAAO,CAAC,QAAS,UAAW,eAAM,QAAS,QAAS,MAAO,iCAAS,OAAQ,kCACrEC,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,SAHS,EADrB,qDAQE,WAAqB,IAAD,OAGlBC,KAAKC,SAAWC,aAAY,kBAAM,EAAKC,SAAS,CAAEJ,KAAMJ,EAAKD,SAAS,OAX1E,gCAaE,WACEU,QAAQC,IAAI,aACRX,GAAKC,EAAKW,SACZZ,EAAI,KAhBV,kCAkBE,WAEEa,cAAcP,KAAKC,YApBvB,oBAsBE,WACE,OACE,eAACO,EAAD,WACE,cAACC,EAAD,4BACA,eAACC,EAAD,WACE,cAACC,EAAD,mBAGA,cAACA,EAAD,qBAGA,cAACC,EAAD,CAAgBC,KAAI,sCAApB,wBAIF,eAACC,EAAD,WACI,cAACC,EAAD,UACE,cAACC,EAAD,UACGhB,KAAKF,MAAMC,SAGhB,cAACkB,EAAD,2CAGA,cAACD,EAAD,4CAGA,cAACE,EAAD,iCAEJ,cAACC,EAAD,IACA,eAACC,EAAD,WACE,cAACC,EAAD,CAAMC,OAAO,SAAST,KAAI,kCAA1B,SACE,cAAC,IAAD,MAEF,cAACQ,EAAD,CAAMC,OAAO,SAAST,KAAI,4CAA1B,SACE,cAAC,IAAD,gBAzDZ,GAA2BU,IAAMC,WAkE3BhB,EAAOiB,IAAOC,IAAV,8jBA+BJjB,EAAOgB,IAAOE,EAAV,oWAaGlC,GAMP0B,EAAQM,IAAOC,IAAV,kTAeLhB,EAAWe,IAAOC,IAAV,+LAaRf,EAAUc,IAAOE,EAAV,oVAaAlC,GAIPmB,EAAgBa,IAAOE,EAAV,8aASHlC,EAMHA,EACOA,GAIdqB,EAAWW,IAAOC,IAAV,iLAURT,EAAWQ,IAAOC,IAAV,uLAURX,EAAWU,IAAOC,IAAV,oFDhNc,WCsNtBV,EAASS,IAAOC,IAAV,yFAKNR,EAAaO,IAAOE,EAAV,wdAEMlC,EAgBFA,EACPA,GAGP2B,EAAQK,IAAOC,IAAV,iIAQLL,EAAOI,IAAOE,EAAV,qUAgBK/B,ICzPAgC,MAZf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACE,cAAC,EAAD,WCEKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCKMQ,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVRC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BjB,IDiHQ,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.7ab41d94.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const flavorColor = \"#17eb97\";\r\nexport const flavorColor2 = \"#10a469\";\r\n\r\n//green -  #ff6200","\nimport React from 'react';\nimport styled from '@emotion/styled';\nimport { AiOutlineGithub,  AiFillLinkedin} from 'react-icons/ai';\nimport {flavorColor, flavorColor2} from './Colors';\n\nvar i = 0;\nconst heys = [\"Hello\", \"Bonjour\", \"你好\", \"Howdy\", \"Salve\", \"Hey\", \"こんにちは\", \"Hola\", \"안녕하세요\"];\nexport class Title extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: \"Hello\"\n    };\n  }\n  \n  componentDidMount() {\n\n    \n    this.interval = setInterval(() => this.setState({ word: heys[i++] }), 500);\n  }\n  componentDidUpdate() {\n    console.log(\"==Updated\");\n    if (i == heys.length)\n      i = 0;\n  }\n  componentWillUnmount() {\n\n    clearInterval(this.interval);\n  }\n  render() {   \n    return (\n      <Fade>\n        <Name>Gregory Blood</Name>\n        <NavLinks>\n          <NavLink>\n            Work\n          </NavLink>\n          <NavLink>\n            Skills\n          </NavLink>\n          <NavLinkButton  href={`mailto: gregoryblood1998@gmail.com?`}>\n            Contact \n          </NavLinkButton>\n        </NavLinks>\n        <HomeBody>\n            <Greeting>\n              <Flavor>\n                {this.state.word} \n              </Flavor>\n            </Greeting>\n            <Headline>\n              Do you need work done right?\n            </Headline>\n            <Flavor>\n              I design, build, and deliver. \n            </Flavor>\n            <WorkButton>Look at my work</WorkButton>\n          </HomeBody>\n        <Block/>\n        <Icons>\n          <Icon target=\"_blank\" href={`https://github.com/gregoryblood`}>\n            <AiOutlineGithub/>\n          </Icon>\n          <Icon target=\"_blank\" href={`https://www.linkedin.com/in/gregoryblood/`}>\n            <AiFillLinkedin/>\n          </Icon>\n        </Icons>\n        \n        \n      </Fade>\n    );\n  }\n}\nconst Fade = styled.div `\n  animation: fadeIn ease 4s;\n  -webkit-animation: fadeIn ease 4s;\n  -moz-animation: fadeIn ease 4s;\n  -o-animation: fadeIn ease 4s;\n  -ms-animation: fadeIn ease 4s;\n  @keyframes fadeIn {\n  0% {opacity:0;}\n  100% {opacity:1;}\n  }\n  \n  @-moz-keyframes fadeIn {\n  0% {opacity:0;}\n  100% {opacity:1;}\n  }\n  \n  @-webkit-keyframes fadeIn {\n  0% {opacity:0;}\n  100% {opacity:1;}\n  }\n  \n  @-o-keyframes fadeIn {\n  0% {opacity:0;}\n  100% {opacity:1;}\n  }\n  \n  @-ms-keyframes fadeIn {\n  0% {opacity:0;}\n  100% {opacity:1;}\n  }\n`;\nconst Name = styled.a `\n  text-decoration: none;\n  cursor: pointer;\n  position: fixed;\n  color: white;\n  font-size: 48px;\n  font-weight: bold;\n  padding: 20px 20px  0 20px;\n  transition-duration: 0.6s;\n  -webkit-transition-duration: 0.6s;\n  left: 1vw;\n\n  &:hover {\n    color: ${flavorColor}\n  }\n  @media(max-width: 813px) {\n    display: none;\n  }\n`;\nconst Block = styled.div`\n    background-color:white;\n    z-index: -1;\n    width:100vh;\n\n    height:100vh;\n    color:white;\n\n    -webkit-transform: rotate(-45deg);\n    -ms-transform: rotate(-45deg);\n    transform: rotate(-45deg);\n    bottom: -50vh;\n    right: -50vh;\n    position: fixed;   \n`;\nconst NavLinks = styled.div `\n  position: fixed;\n  top: 20px;\n  right: 40px;\n  @media(max-width: 813px) {\n    width: 100%;\n    right: 0;\n    top: auto;\n    bottom: 20px;\n    \n  }\n  \n`;\nconst NavLink = styled.a`\n  text-decoration: none;\n  cursor: pointer;\n  display: inline-block;\n  font-size: 24px;\n  font-weight: bold;\n  padding: 10px 20px ;\n  transition-duration: 0.6s;\n  -webkit-transition-duration: 0.6s; \n  border-style: solid;\n  border-color: transparent;\n  color: white;\n  &:hover {\n    color: ${flavorColor};\n  }\n`;\n\nconst NavLinkButton = styled.a`\n  text-decoration: none;\n  cursor: pointer;\n  display: inline-block;\n  font-size: 24px;\n  font-weight: bold;\n  padding: 10px 20px ;\n  transition-duration: 0.4s;\n  -webkit-transition-duration: 0.4s;\n  background: ${flavorColor};\n  border-radius: 8px;\n  border-style: solid;\n  border-color: transparent;\n  color: black;\n  &:hover {\n    color: ${flavorColor};\n    border-color: ${flavorColor};\n    background: black;\n  }\n`;\nconst HomeBody = styled.div `\n  font-weight: bold;\n  position: fixed;\n  top: 35vh;\n  padding: 10px 10vw;\n  color: #979fab;\n  @media(max-width: 813px) {\n    top: 20vh;\n  }\n`;\nconst Headline = styled.div `\n  color: white;\n  font-size: 64px;\n  font-weight: bold;\n  text-align: left;\n  padding: 0px 0;\n  @media(max-width: 813px) {\n    font-size: 16x;\n  }\n`;\nconst Greeting = styled.div `\n  position: absolute;\n  top: -50px;\n  color: ${flavorColor2};\n  \n`;\nconst Flavor = styled.div `\n  font-size: 36px;\n  text-align: left;\n  padding: 10px 0;\n`;\nconst WorkButton = styled.a `\n  text-decoration: none;\n  background-color: ${flavorColor};\n  cursor: pointer;\n  display: block;\n  color: black;\n  font-weight: bold;\n  width: 250px;\n  font-size: 28px;\n  margin-top: 20px;\n  padding: 20px 10px;\n  border-style: solid;\n  border-radius: 8px;\n  border-color: transparent;\n  transition-duration: 0.4s;\n  -webkit-transition-duration: 0.4s;\n  &:hover {\n    background-color: black;\n    border-color: ${flavorColor};\n    color: ${flavorColor};\n  }\n`;\nconst Icons = styled.div `\n  text-decoration: none;\n  position: fixed;\n  bottom: 2vh;\n  right: 2vw;\n  font-size: 50px;\n  \n`;\nconst Icon = styled.a `\n  text-decoration: none;\n  display: block;\n  cursor: pointer;\n  padding: 10px 10px;\n  margin: 10px 0;\n  border-radius: 50%;\n  line-height: 4px;\n  color: black;\n  transition-duration: 0.6s;\n  -webkit-transition-duration: 0.6s;\n  &:hover {\n    color: white;\n    background: black;\n  }\n`;\nexport default Title;\n","import logo from './logo.svg';\nimport './App.css';\nimport { Route, Switch } from 'react-router';\nimport Title from './Components/Title';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/\">\n          <Title/>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.unregister();"],"sourceRoot":""}